print("hello world!")

# Python 注释方式详解

# 1. 单行注释 (#)
# 格式: # 注释内容
# 特点: 以 # 开头，只能注释一行，可以放在代码行末尾
# 示例:
# 这是一个单行注释
name = "张三"  # 这是行尾注释
age = 18  # 年龄变量

print(name,age)

# 2. 多行注释 (三引号)
# 格式: '''注释内容''' 或 """注释内容"""
# 特点: 可以跨越多行，通常用作文档字符串(docstring)
# 示例:
'''
这是一个多行注释
可以包含多行内容
适合长文本说明
'''

"""
这也是多行注释
功能与三引号相同
推荐用于文档字符串
"""

# 3. 文档字符串(Docstring)
# 格式: """文档内容""" 或 '''文档内容'''
# 使用场景: 函数开头、类开头、模块开头
# 示例:
def calculate_area(length, width):
    """
    计算矩形面积
    
    参数:
        length (float): 长度
        width (float): 宽度
    
    返回:
        float: 面积
    """
    return length * width

# 4. 注释的最佳实践
# - 注释应该解释"为什么"而不是"是什么"
# - 代码应该自解释，注释补充说明
# - 及时更新注释，保持与代码同步
# - 使用清晰、简洁的语言
# - 避免无意义的注释

# 好的注释示例:
# 检查用户年龄是否满足投票条件
if age >= 18:
    can_vote = True
    print(can_vote)

# 不好的注释示例:
# 设置变量
age = 18  # 这个注释没有意义

# 5. 特殊注释类型
# TODO: 标记待完成的任务
# FIXME: 标记需要修复的问题
# NOTE: 重要说明
# HACK: 临时解决方案

# 6. 注释的格式规范
# - 单行注释: # 后面加一个空格
# - 多行注释: 每行缩进保持一致
# - 文档字符串: 遵循 PEP 257 规范
# - 行尾注释: # 前至少两个空格

# 7. 实际应用示例
"""
用户管理模块

提供用户注册、登录、信息管理等功能
作者: 张三
版本: 1.0
"""

